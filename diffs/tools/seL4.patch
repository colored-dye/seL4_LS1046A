diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/cmake-tool/helpers/application_settings.cmake seL4/cmake-tool/helpers/application_settings.cmake
--- ../backup/tools/seL4/cmake-tool/helpers/application_settings.cmake	2023-03-07 16:02:43.842833792 +0800
+++ seL4/cmake-tool/helpers/application_settings.cmake	2023-03-07 14:51:42.786985697 +0800
@@ -10,7 +10,7 @@
 include_guard(GLOBAL)
 
 function(ApplyData61ElfLoaderSettings kernel_platform kernel_sel4_arch)
-    set(binary_list "tx1;hikey;odroidc2;odroidc4;imx8mq-evk;imx8mm-evk;hifive;tqma8xqp1gb")
+    set(binary_list "tx1;hikey;odroidc2;odroidc4;imx8mq-evk;imx8mm-evk;hifive;tqma8xqp1gb;ls1046a")
     set(efi_list "tk1;rockpro64;quartz64")
     set(uimage_list "tx2;am335x")
     if(
@@ -36,6 +36,10 @@
         set(ElfloaderMode "hypervisor" CACHE STRING "" FORCE)
         set(ElfloaderMonitorHook ON CACHE BOOL "" FORCE)
     endif()
+    # Manually set image start address
+    # if(KernelPlatformOK1046AC2)
+    #     set(IMAGE_START_ADDR 0x81000000 CACHE INTERNAL "" FORCE)
+    # endif()
     if((KernelPlatformImx8mm-evk OR KernelPlatImx8mq) AND KernelSel4ArchAarch32)
         set(ElfloaderArmV8LeaveAarch64 ON CACHE BOOL "" FORCE)
         # This applies to imx8mm, imx8mq (EVK and MaaXBoard) when in aarch32 configuration
@@ -163,6 +167,7 @@
         "exynos5:exynos5250,exynos5410,exynos5422"
         "am335x:am335x-boneblack,am335x-boneblue,am335x-bone"
         "zynqmp:zcu102,ultra96,ultra96v2"
+        "ls1046a:ok1046a-c2"
         "-KernelSel4Arch"
         "pc99:x86_64,ia32"
     )
diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/elfloader-tool/CMakeLists.txt seL4/elfloader-tool/CMakeLists.txt
--- ../backup/tools/seL4/elfloader-tool/CMakeLists.txt	2023-03-07 16:02:43.842833792 +0800
+++ seL4/elfloader-tool/CMakeLists.txt	2023-03-07 10:40:05.365968792 +0800
@@ -421,7 +421,7 @@
     elfloader
     PRIVATE
         cpio
-        gcc
+        # gcc
         elfloader_Config
         sel4_autoconf
 )
diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/elfloader-tool/src/arch-arm/armv/armv8-a/64/mmu.S seL4/elfloader-tool/src/arch-arm/armv/armv8-a/64/mmu.S
--- ../backup/tools/seL4/elfloader-tool/src/arch-arm/armv/armv8-a/64/mmu.S	2023-03-07 16:02:43.846833918 +0800
+++ seL4/elfloader-tool/src/arch-arm/armv/armv8-a/64/mmu.S	2023-03-07 14:29:08.822955598 +0800
@@ -48,6 +48,7 @@
     /* Ensure I-cache, D-cache and mmu are disabled for EL1/Stage1 */
     disable_mmu sctlr_el1 , x8
 
+    /* bl invalidate_dcache */
     /*
      * Invalidate the local I-cache so that any instructions fetched
      * speculatively are discarded.
diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/elfloader-tool/src/binaries/efi/gnuefi/elf_aarch64_efi.lds seL4/elfloader-tool/src/binaries/efi/gnuefi/elf_aarch64_efi.lds
--- ../backup/tools/seL4/elfloader-tool/src/binaries/efi/gnuefi/elf_aarch64_efi.lds	2023-03-07 16:02:43.862834425 +0800
+++ seL4/elfloader-tool/src/binaries/efi/gnuefi/elf_aarch64_efi.lds	2023-03-07 13:34:54.665020352 +0800
@@ -34,6 +34,15 @@
    *(.got.plt)
    *(.got)
 
+    /* __start__driver_list = .;
+    *(_driver_list)
+    __stop__driver_list = .;
+
+    . = ALIGN(8);
+    _archive_start = .;
+    *(._archive_cpio)
+    _archive_end = .; */
+
    /* the EFI loader doesn't seem to like a .bss section, so we stick
       it all into .data: */
    . = ALIGN(16);
@@ -42,6 +51,7 @@
    *(.scommon)
    *(.dynbss)
    *(.bss)
+   /* *(.bss.*) */
    *(COMMON)
    . = ALIGN(16);
    _bss_end = .;
@@ -61,6 +71,8 @@
   .dynstr   : { *(.dynstr) }
   . = ALIGN(4096);
   .note.gnu.build-id : { *(.note.gnu.build-id) }
+
+  /* _end = .; */
   /DISCARD/ :
   {
     *(.rel.reloc)
diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/elfloader-tool/src/drivers/uart/ns16550a-uart.c seL4/elfloader-tool/src/drivers/uart/ns16550a-uart.c
--- ../backup/tools/seL4/elfloader-tool/src/drivers/uart/ns16550a-uart.c	1970-01-01 08:00:00.000000000 +0800
+++ seL4/elfloader-tool/src/drivers/uart/ns16550a-uart.c	2023-03-07 13:43:44.933448249 +0800
@@ -0,0 +1,69 @@
+/*
+ * Copyright 2020, Data61, CSIRO (ABN 41 687 119 230)
+ *
+ * SPDX-License-Identifier: GPL-2.0-only
+ */
+
+#include <elfloader_common.h>
+#include <devices_gen.h>
+#include <drivers/common.h>
+#include <drivers/uart.h>
+
+#include <printf.h>
+#include <types.h>
+
+#define UTHR        0x0 // UART Transmitter Holding Register.
+                        // Data is written to this register.
+                        // UTHRa: 0x400 + a * 0x100 (a=1,2)
+
+#define ULSR        0x5 // UART Line Status Register.
+                        // Read-only registers that 
+                        // ULSRa: 0x405 + a * 0x100 (a=1,2)
+
+#define ULSR_THRE   BIT(5) // Transmitter Holding Register Empty
+// #define ULSR_BI     BIT(4) // Break Interrupt
+// #define ULSR_FE     BIT(3) // Framing Error
+// #define ULSR_PE     BIT(2) // Parity Error
+// #define ULSR_OE     BIT(1) // Overrun Error
+#define ULSR_DR     BIT(0) // Data Ready
+
+#define UART_REG(mmio, x) ((volatile uint8_t *)(((uint8_t *)mmio) + (x)))
+
+static int uart_ns16550a_putchar(struct elfloader_device *dev, unsigned int c)
+{
+    volatile void *mmio = dev->region_bases[0];
+
+    /* Wait until UART ready for the next character. */
+    while ((*UART_REG(mmio, ULSR) & ULSR_THRE) == 0);
+
+    /* Add character to the buffer. */
+    *UART_REG(mmio, UTHR) = c;
+
+    return 0;
+}
+
+static int uart_ns16550a_init(struct elfloader_device *dev,
+                          UNUSED void *match_data)
+{
+    uart_set_out(dev);
+    return 0;
+}
+
+static const struct dtb_match_table uart_ns16550a_matches[] = {
+    { .compatible = "fsl,ns16550" },
+    { .compatible = "ns16550a" },
+    { .compatible = NULL /* sentinel */ },
+};
+
+static const struct elfloader_uart_ops uart_ns16550a_ops = {
+    .putc = &uart_ns16550a_putchar,
+};
+
+static const struct elfloader_driver uart_ns16550a = {
+    .match_table = uart_ns16550a_matches,
+    .type = DRIVER_UART,
+    .init = &uart_ns16550a_init,
+    .ops = &uart_ns16550a_ops,
+};
+
+ELFLOADER_DRIVER(uart_ns16550a);
diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/elfloader-tool/src/plat/ls1046a/platform_init.c seL4/elfloader-tool/src/plat/ls1046a/platform_init.c
--- ../backup/tools/seL4/elfloader-tool/src/plat/ls1046a/platform_init.c	1970-01-01 08:00:00.000000000 +0800
+++ seL4/elfloader-tool/src/plat/ls1046a/platform_init.c	2023-02-27 14:06:35.656196472 +0800
@@ -0,0 +1,15 @@
+#include <autoconf.h>
+#include <mode/arm_generic_timer.h>
+
+/* Reset the virtual offset for the platform timer to 0 */
+void platform_init(void)
+{
+    reset_cntvoff();
+}
+
+#if CONFIG_MAX_NUM_NODES > 1
+void non_boot_init(void)
+{
+    reset_cntvoff();
+}
+#endif

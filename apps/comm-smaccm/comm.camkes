import <std_connector.camkes>;
import <global-connectors.camkes>;

import <Timer.idl4>;
import <TimeServer/TimeServer.camkes>;

import "components/dispatch_periodic/dispatch_periodic.camkes";

import "components/Server/Server.camkes";
import "components/Monitors/Server_decrypt2self_Monitor/Server_decrypt2self_Monitor.camkes";

import "components/Encrypt/Encrypt.camkes";
import "components/Monitors/Encrypt_server2self_Monitor/Encrypt_server2self_Monitor.camkes";

import "components/Decrypt/Decrypt.camkes";

#define MONITOR_READ_ACCESS 111
#define MONITOR_WRITE_ACCESS 222

assembly {
    composition {
        /*
         * Components
         */
        component Server Server_inst;
        component dispatch_periodic dispatch_periodic_inst;
        component TimeServer time_server;
        component Encrypt Encrypt_inst;
        component Decrypt Decrypt_inst;

        component Encrypt_server2self_Monitor encrypt_server2self_monitor;
        component Server_decrypt2self_Monitor server_decrypt2self_monitor;

        /*
         * Dispatcher connections
         */

        // Time Server <--> Periodic Dispatcher
        connection seL4TimeServer periodic_dispatch_timer(from dispatch_periodic_inst.timer, to time_server.the_timer);
        connection seL4GlobalAsynchCallback echo_int(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);

        // Time Server <--> Server
        connection seL4TimeServer Server_periodic_dispatcher_timer(from Server_inst.timer, to time_server.the_timer);
        connection seL4Notification Server_periodic_dispatcher_echo_int(from dispatch_periodic_inst.Server_periodic_dispatcher, to Server_inst.timer_complete);

        // Encrypt -> Time Server
        // Periodic Dispatcher -> Encrypt
        connection seL4TimeServer Encrypt_periodic_dispatcher_timer(from Encrypt_inst.timer, to time_server.the_timer);
        connection seL4Notification Encrypt_periodic_dispatcher_echo_int(from dispatch_periodic_inst.Encrypt_periodic_dispatcher, to Encrypt_inst.timer_complete);

        // Decrypt -> Time Server
        // Periodic Dispatcher -> Decrypt
        connection seL4TimeServer Decrypt_periodic_dispatcher_timer(from Decrypt_inst.timer, to time_server.the_timer);
        connection seL4Notification Decrypt_periodic_dispatcher_echo_int(from dispatch_periodic_inst.Decrypt_periodic_dispatcher, to Decrypt_inst.timer_complete);

        /*
         * Port connections
         */

        // Encrypt <--> Encrypt_server2self_Monitor <- Server
        connection seL4RPCCall conn1 (from Encrypt_inst.server2self0, to encrypt_server2self_monitor.mon);
        connection seL4Notification conn2 (from encrypt_server2self_monitor.monsig, to Encrypt_inst.server2self_notification);
        connection seL4RPCCall conn3 (from Server_inst.self2encrypt0, to encrypt_server2self_monitor.mon);

        // Decrypt -> Server_decrypt2self_Monitor <--> Server
        connection seL4RPCCall conn4 (from Decrypt_inst.self2server0, to server_decrypt2self_monitor.mon);
        connection seL4RPCCall conn5 (from Server_inst.decrypt2self0, to server_decrypt2self_monitor.mon);
        connection seL4Notification conn6 (from server_decrypt2self_monitor.monsig, to Server_inst.decrypt2self_notification);       
    }

    configuration {
        time_server.timers_per_client = 1;

        Server_inst.priority = 150;
        Server_inst._control_stack_size = 1024;
        Server_inst.timer_attributes = 13;
        // Server_inst.timer_global_endpoint = "Server_timer";
        Server_inst.self2encrypt0_attributes = MONITOR_WRITE_ACCESS;
        Server_inst.decrypt2self0_attributes = MONITOR_READ_ACCESS;

        Encrypt_inst.priority = 150;
        Encrypt_inst._control_stack_size = 1024;
        Encrypt_inst.timer_attributes = 12;
        // Encrypt_inst.timer_global_endpoint = "Encrypt_timer";

        Decrypt_inst.priority = 150;
        Decrypt_inst._control_stack_size = 1024;
        Decrypt_inst.timer_attributes = 11;
        // Decrypt_inst.timer_global_endpoint = "Decrypt_timer";

        dispatch_periodic_inst.timer_attributes = 10;
        // dispatch_periodic_inst.timer_global_endpoint = "periodic_dispatcher_timer";
        // dispatch_periodic_inst.timer_complete_global_endpoint = "periodic_dispatcher_timer";
        dispatch_periodic_inst.priority = 201;

        server_decrypt2self_monitor.priority = 230;
        Decrypt_inst.self2server0_attributes = MONITOR_WRITE_ACCESS;

        encrypt_server2self_monitor.priority = 230;
        Encrypt_inst.server2self0_attributes = MONITOR_READ_ACCESS;
    }
}

/* This file has been autogenerated by Ivory
 * Compiler version  0.1.0.5
 */
#ifndef __CONTROLLABLEVEHICLECONSUMERINPUT_MONITOR_H__
#define __CONTROLLABLEVEHICLECONSUMERINPUT_MONITOR_H__
#ifdef __cplusplus
extern "C" {
#endif
#include "ivory.h"
#include "heartbeat_types.h"
#include "time_micros_types.h"
#include "arming_mode_types.h"
#include "sequence_numbered_packed_status_types.h"
#include "sequence_num_types.h"
#include "packed_status_types.h"
#include "gps_fix_types.h"
#include "tristate_types.h"
#include "control_modes_types.h"
#include "control_source_types.h"
#include "yaw_mode_types.h"
#include "throttle_mode_types.h"
#include "sequence_numbered_control_law_types.h"
#include "control_law_types.h"
#include "sequence_numbered_rc_input_types.h"
#include "rc_input_types.h"
#include "sequence_numbered_user_input_result_types.h"
#include "user_input_result_types.h"
#include "user_input_types.h"
#include "sequence_numbered_sensors_result_types.h"
#include "sensors_result_types.h"
#include "xyz_types.h"
#include "quaternion_types.h"
#include "sequence_numbered_gyroscope_sample_types.h"
#include "gyroscope_sample_types.h"
#include "sequence_numbered_accelerometer_sample_types.h"
#include "accelerometer_sample_types.h"
#include "sequence_numbered_barometer_sample_types.h"
#include "barometer_sample_types.h"
#include "sequence_numbered_lidarlite_sample_types.h"
#include "lidarlite_sample_types.h"
#include "sequence_numbered_magnetometer_sample_types.h"
#include "magnetometer_sample_types.h"
#include "sequence_numbered_px4flow_integral_sample_types.h"
#include "px4flow_integral_sample_types.h"
#include "sequence_numbered_px4flow_sample_types.h"
#include "px4flow_sample_types.h"
#include "sequence_numbered_position_sample_types.h"
#include "position_sample_types.h"
#include "sequence_numbered_control_setpoint_types.h"
#include "control_setpoint_types.h"
#include "sequence_numbered_control_output_types.h"
#include "control_output_types.h"
#include "sequence_numbered_quadcopter_motors_types.h"
#include "quadcopter_motors_types.h"
#include "sequence_numbered_att_control_debug_types.h"
#include "att_control_debug_types.h"
#include "pid_state_types.h"
#include "sequence_numbered_alt_control_debug_types.h"
#include "alt_control_debug_types.h"
#include "sequence_numbered_px4io_state_types.h"
#include "px4io_state_types.h"
#include "px4io_status_types.h"
#include "px4io_alarms_types.h"
#include "sequence_numbered_arming_status_types.h"
#include "arming_status_types.h"
#include "sequence_numbered_float_types.h"
#include "sequence_numbered_pid_config_types.h"
#include "pid_config_types.h"
#include "sequence_numbered_throttle_ui_types.h"
#include "throttle_ui_types.h"
#include "sequence_numbered_stab_config_types.h"
#include "stab_config_types.h"
#include "sequence_numbered_tristate_types.h"
#include "sequence_numbered_control_modes_types.h"
#include "sequence_numbered_user_input_types.h"
#include "sequence_numbered_rgb_led_setting_types.h"
#include "rgb_led_setting_types.h"
#include "sequence_numbered_camera_target_types.h"
#include "camera_target_types.h"
#include "sequence_numbered_reboot_req_types.h"
#include "reboot_req_types.h"
#include "reboot_magic_types.h"
#include "smaccm_camera_module.h"
#include "towerCameraVMDeps.h"
#include "output_self2framing_enqueue_monitor.h"
void callback_rebootReqSetReqConsumer(const struct sequence_numbered_reboot_req *n_var0);
void callback_nominalThrottleSetReqConsumer(const struct sequence_numbered_float *n_var0);
void callback_nominalThrottleGetReqConsumer(const uint32_t *n_var0);
void callback_altitudeRatePidSetReqConsumer(const struct sequence_numbered_pid_config *n_var0);
void callback_altitudeRatePidGetReqConsumer(const uint32_t *n_var0);
void callback_altitudePositionPidSetReqConsumer(const struct sequence_numbered_pid_config *n_var0);
void callback_altitudePositionPidGetReqConsumer(const uint32_t *n_var0);
void callback_throttleUiSetReqConsumer(const struct sequence_numbered_throttle_ui *n_var0);
void callback_throttleUiGetReqConsumer(const uint32_t *n_var0);
void callback_attitudeRollStabSetReqConsumer(const struct sequence_numbered_stab_config *n_var0);
void callback_attitudeRollStabGetReqConsumer(const uint32_t *n_var0);
void callback_attitudePitchStabSetReqConsumer(const struct sequence_numbered_stab_config *n_var0);
void callback_attitudePitchStabGetReqConsumer(const uint32_t *n_var0);
void callback_yawRatePidSetReqConsumer(const struct sequence_numbered_pid_config *n_var0);
void callback_yawRatePidGetReqConsumer(const uint32_t *n_var0);
void callback_yawPositionPidSetReqConsumer(const struct sequence_numbered_pid_config *n_var0);
void callback_yawPositionPidGetReqConsumer(const uint32_t *n_var0);
void callback_armingRequestSetReqConsumer(const struct sequence_numbered_tristate *n_var0);
void callback_armingRequestGetReqConsumer(const uint32_t *n_var0);
void callback_controlModesRequestSetReqConsumer(const struct sequence_numbered_control_modes *n_var0);
void callback_controlModesRequestGetReqConsumer(const uint32_t *n_var0);
void callback_userInputRequestSetReqConsumer(const struct sequence_numbered_user_input *n_var0);
void callback_userInputRequestGetReqConsumer(const uint32_t *n_var0);
void callback_rgbLedSetReqConsumer(const struct sequence_numbered_rgb_led_setting *n_var0);
void callback_rgbLedGetReqConsumer(const uint32_t *n_var0);
void callback_cameraTargetInputGetReqConsumer(const uint32_t *n_var0);
void callback_packedStatusGetReqConsumer(const uint32_t *n_var0);
void callback_controlLawGetReqConsumer(const uint32_t *n_var0);
void callback_rcInputGetReqConsumer(const uint32_t *n_var0);
void callback_userInputGetReqConsumer(const uint32_t *n_var0);
void callback_sensorsOutputGetReqConsumer(const uint32_t *n_var0);
void callback_gyroOutputGetReqConsumer(const uint32_t *n_var0);
void callback_accelOutputGetReqConsumer(const uint32_t *n_var0);
void callback_baroOutputGetReqConsumer(const uint32_t *n_var0);
void callback_lidarliteOutputGetReqConsumer(const uint32_t *n_var0);
void callback_magOutputGetReqConsumer(const uint32_t *n_var0);
void callback_px4flowIntOutputGetReqConsumer(const uint32_t *n_var0);
void callback_px4flowOutputGetReqConsumer(const uint32_t *n_var0);
void callback_gpsOutputGetReqConsumer(const uint32_t *n_var0);
void callback_controlSetpointGetReqConsumer(const uint32_t *n_var0);
void callback_controlOutputGetReqConsumer(const uint32_t *n_var0);
void callback_motorOutputGetReqConsumer(const uint32_t *n_var0);
void callback_attControlDebugGetReqConsumer(const uint32_t *n_var0);
void callback_altControlDebugGetReqConsumer(const uint32_t *n_var0);
void callback_px4ioStateGetReqConsumer(const uint32_t *n_var0);
void callback_armingStatusGetReqConsumer(const uint32_t *n_var0);
void callback_batteryVoltageGetReqConsumer(const uint32_t *n_var0);

#ifdef __cplusplus
}
#endif
#endif /* __CONTROLLABLEVEHICLECONSUMERINPUT_MONITOR_H__ */
